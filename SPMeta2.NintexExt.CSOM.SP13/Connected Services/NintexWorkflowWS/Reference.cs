//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://nintex.com", ConfigurationName="NintexWorkflowWS.NintexWorkflowWSSoap")]
    public interface NintexWorkflowWSSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/WorkflowFormProductSelected", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string WorkflowFormProductSelected(string workflowConfiguration, string activityConfiguration, string product, string formType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/WorkflowFormProductSelected", ReplyAction="*")]
        System.Threading.Tasks.Task<string> WorkflowFormProductSelectedAsync(string workflowConfiguration, string activityConfiguration, string product, string formType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/CheckInForms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CheckInForms(string workflowConfiguration, string activityConfiguration, string formType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/CheckInForms", ReplyAction="*")]
        System.Threading.Tasks.Task CheckInFormsAsync(string workflowConfiguration, string activityConfiguration, string formType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SaveWorkflow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData SaveWorkflow(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SaveWorkflow", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData> SaveWorkflowAsync(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/WorkflowExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NameInUseStatus WorkflowExists(string workflowName, System.Guid listId, string workflowType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/WorkflowExists", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NameInUseStatus> WorkflowExistsAsync(string workflowName, System.Guid listId, string workflowType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SnippetExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        bool SnippetExists(string snippetName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SnippetExists", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SnippetExistsAsync(string snippetName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/TemplateExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        bool TemplateExists(string templateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/TemplateExists", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> TemplateExistsAsync(string templateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SaveSnippet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        string SaveSnippet(string snippetName, string activityConfigs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SaveSnippet", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SaveSnippetAsync(string snippetName, string activityConfigs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SaveTemplate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        void SaveTemplate(string templateName, string templateDescription, string category, string activityConfigs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SaveTemplate", ReplyAction="*")]
        System.Threading.Tasks.Task SaveTemplateAsync(string templateName, string templateDescription, string category, string activityConfigs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SaveTemplate2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        void SaveTemplate2(string templateName, string templateDescription, string category, string activityConfigs, int lcid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SaveTemplate2", ReplyAction="*")]
        System.Threading.Tasks.Task SaveTemplate2Async(string templateName, string templateDescription, string category, string activityConfigs, int lcid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishWorkflow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData PublishWorkflow(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishWorkflow", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData> PublishWorkflowAsync(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishWorkflow2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData PublishWorkflow2(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes, bool isProduction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishWorkflow2", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData> PublishWorkflow2Async(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes, bool isProduction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/TerminateWorkflow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        void TerminateWorkflow(System.Guid listId, int itemId, System.Guid instanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/TerminateWorkflow", ReplyAction="*")]
        System.Threading.Tasks.Task TerminateWorkflowAsync(System.Guid listId, int itemId, System.Guid instanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/TerminateWorkflowByName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        void TerminateWorkflowByName(string fileUrl, string workflowName, bool terminatePreviousInstances);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/TerminateWorkflowByName", ReplyAction="*")]
        System.Threading.Tasks.Task TerminateWorkflowByNameAsync(string fileUrl, string workflowName, bool terminatePreviousInstances);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/TerminateWorkflowByNameForListItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        void TerminateWorkflowByNameForListItem(string listName, int itemId, string workflowName, bool terminatePreviousInstances);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/TerminateWorkflowByNameForListItem", ReplyAction="*")]
        System.Threading.Tasks.Task TerminateWorkflowByNameForListItemAsync(string listName, int itemId, string workflowName, bool terminatePreviousInstances);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/CheckGlobalReuseStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        bool CheckGlobalReuseStatus(string workflowName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/CheckGlobalReuseStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CheckGlobalReuseStatusAsync(string workflowName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/DeleteWorkflow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        void DeleteWorkflow(System.Guid listId, System.Guid workflowId, string workflowType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/DeleteWorkflow", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteWorkflowAsync(System.Guid listId, System.Guid workflowId, string workflowType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/DeleteSnippet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        void DeleteSnippet(System.Guid snippetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/DeleteSnippet", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteSnippetAsync(System.Guid snippetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/HideTaskForApprover", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        void HideTaskForApprover(long approverId, int contentDbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/HideTaskForApprover", ReplyAction="*")]
        System.Threading.Tasks.Task HideTaskForApproverAsync(long approverId, int contentDbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/HideWorkflow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        void HideWorkflow(System.Guid siteId, System.Guid instanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/HideWorkflow", ReplyAction="*")]
        System.Threading.Tasks.Task HideWorkflowAsync(System.Guid siteId, System.Guid instanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/StartWorkflow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        System.Guid StartWorkflow(string fileUrl, string workflowName, string associationData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/StartWorkflow", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Guid> StartWorkflowAsync(string fileUrl, string workflowName, string associationData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/StartWorkflowOnListItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        System.Guid StartWorkflowOnListItem(int itemId, string listName, string workflowName, string associationData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/StartWorkflowOnListItem", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Guid> StartWorkflowOnListItemAsync(int itemId, string listName, string workflowName, string associationData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/StartSiteWorkflow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        System.Guid StartSiteWorkflow(string workflowName, string associationData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/StartSiteWorkflow", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Guid> StartSiteWorkflowAsync(string workflowName, string associationData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetItemsPendingMyApproval", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ItemsPendingApproval GetItemsPendingMyApproval(string uniquenessInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetItemsPendingMyApproval", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ItemsPendingApproval> GetItemsPendingMyApprovalAsync(string uniquenessInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetRunningWorkflowTasksForCurrentUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[] GetRunningWorkflowTasksForCurrentUser(string fileUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetRunningWorkflowTasksForCurrentUser", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[]> GetRunningWorkflowTasksForCurrentUserAsync(string fileUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetRunningWorkflowTasksForCurrentUserForListItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[] GetRunningWorkflowTasksForCurrentUserForListItem(int itemId, string listName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetRunningWorkflowTasksForCurrentUserForListItem", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[]> GetRunningWorkflowTasksForCurrentUserForListItemAsync(int itemId, string listName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetRunningWorkflowTasks", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[] GetRunningWorkflowTasks(string fileUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetRunningWorkflowTasks", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[]> GetRunningWorkflowTasksAsync(string fileUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetRunningWorkflowTasksForListItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[] GetRunningWorkflowTasksForListItem(int itemId, string listName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetRunningWorkflowTasksForListItem", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[]> GetRunningWorkflowTasksForListItemAsync(int itemId, string listName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetRunningWorkflowTasksCollection", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[] GetRunningWorkflowTasksCollection(string userlogin, string teamsiteUrl, string listName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetRunningWorkflowTasksCollection", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[]> GetRunningWorkflowTasksCollectionAsync(string userlogin, string teamsiteUrl, string listName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/ProcessTaskResponse", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        bool ProcessTaskResponse(string comments, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Outcome outcome, int spTaskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/ProcessTaskResponse", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> ProcessTaskResponseAsync(string comments, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Outcome outcome, int spTaskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/ProcessTaskResponse2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        bool ProcessTaskResponse2(string comments, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Outcome outcome, int spTaskId, string taskListName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/ProcessTaskResponse2", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> ProcessTaskResponse2Async(string comments, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Outcome outcome, int spTaskId, string taskListName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/ProcessTaskResponse3", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ProcessTaskResponseResult ProcessTaskResponse3(string comments, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Outcome outcome, int spTaskId, string taskListName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/ProcessTaskResponse3", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ProcessTaskResponseResult> ProcessTaskResponse3Async(string comments, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Outcome outcome, int spTaskId, string taskListName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/ProcessFlexiTaskResponse", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        bool ProcessFlexiTaskResponse(string comments, string outcome, int spTaskId, string taskListName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/ProcessFlexiTaskResponse", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> ProcessFlexiTaskResponseAsync(string comments, string outcome, int spTaskId, string taskListName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/ProcessFlexiTaskResponse2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ProcessTaskResponseResult ProcessFlexiTaskResponse2(string comments, string outcome, int spTaskId, string taskListName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/ProcessFlexiTaskResponse2", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ProcessTaskResponseResult> ProcessFlexiTaskResponse2Async(string comments, string outcome, int spTaskId, string taskListName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetOutcomesForFlexiTask", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ConfiguredOutcome[] GetOutcomesForFlexiTask(int spTaskId, string taskListName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetOutcomesForFlexiTask", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ConfiguredOutcome[]> GetOutcomesForFlexiTaskAsync(int spTaskId, string taskListName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/DelegateTask", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        bool DelegateTask(int spTaskId, string taskListName, string targetUsername, string comments, bool sendNotification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/DelegateTask", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> DelegateTaskAsync(int spTaskId, string taskListName, string targetUsername, string comments, bool sendNotification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetWorkflowHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowLog[] GetWorkflowHistory(string fileUrl, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SPWorkflowState stateFilter, string workflowNameFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetWorkflowHistory", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowLog[]> GetWorkflowHistoryAsync(string fileUrl, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SPWorkflowState stateFilter, string workflowNameFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetWorkflowHistoryForListItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowLog[] GetWorkflowHistoryForListItem(int itemId, string listName, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SPWorkflowState stateFilter, string workflowNameFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetWorkflowHistoryForListItem", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowLog[]> GetWorkflowHistoryForListItemAsync(int itemId, string listName, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SPWorkflowState stateFilter, string workflowNameFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/QueryForMessages", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.MessageBoxItem[] QueryForMessages(System.Guid workflowInstanceId, string messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/QueryForMessages", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.MessageBoxItem[]> QueryForMessagesAsync(System.Guid workflowInstanceId, string messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishFromNWFXml", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        bool PublishFromNWFXml(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishFromNWFXml", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> PublishFromNWFXmlAsync(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishFromNWFXmlSkipValidation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        bool PublishFromNWFXmlSkipValidation(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishFromNWFXmlSkipValidation", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> PublishFromNWFXmlSkipValidationAsync(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishFromNWFXmlNoOverwrite", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        bool PublishFromNWFXmlNoOverwrite(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishFromNWFXmlNoOverwrite", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> PublishFromNWFXmlNoOverwriteAsync(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishFromNWFXmlSkipValidationNoOverwrite", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        bool PublishFromNWFXmlSkipValidationNoOverwrite(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishFromNWFXmlSkipValidationNoOverwrite", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> PublishFromNWFXmlSkipValidationNoOverwriteAsync(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish);
        
        // CODEGEN: Parameter 'workflowFile' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishFromNWF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFResponse PublishFromNWF(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishFromNWF", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFResponse> PublishFromNWFAsync(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFRequest request);
        
        // CODEGEN: Parameter 'workflowFile' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishFromNWFNoOverwrite", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFNoOverwriteResponse PublishFromNWFNoOverwrite(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFNoOverwriteRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishFromNWFNoOverwrite", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFNoOverwriteResponse> PublishFromNWFNoOverwriteAsync(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFNoOverwriteRequest request);
        
        // CODEGEN: Parameter 'workflowFile' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishFromNWFSkipValidation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationResponse PublishFromNWFSkipValidation(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishFromNWFSkipValidation", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationResponse> PublishFromNWFSkipValidationAsync(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationRequest request);
        
        // CODEGEN: Parameter 'workflowFile' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishFromNWFSkipValidationNoOverwrite", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationNoOverwriteResponse PublishFromNWFSkipValidationNoOverwrite(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationNoOverwriteRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/PublishFromNWFSkipValidationNoOverwrite", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationNoOverwriteResponse> PublishFromNWFSkipValidationNoOverwriteAsync(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationNoOverwriteRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SaveFromNWFXml", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData SaveFromNWFXml(string workflowFile, string listName, string workflowName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SaveFromNWFXml", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData> SaveFromNWFXmlAsync(string workflowFile, string listName, string workflowName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SaveFromNWFXmlNoOverwrite", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData SaveFromNWFXmlNoOverwrite(string workflowFile, string listName, string workflowName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SaveFromNWFXmlNoOverwrite", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData> SaveFromNWFXmlNoOverwriteAsync(string workflowFile, string listName, string workflowName);
        
        // CODEGEN: Parameter 'workflowFile' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SaveFromNWF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFResponse SaveFromNWF(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SaveFromNWF", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFResponse> SaveFromNWFAsync(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFRequest request);
        
        // CODEGEN: Parameter 'workflowFile' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SaveFromNWFNoOverwrite", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFNoOverwriteResponse SaveFromNWFNoOverwrite(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFNoOverwriteRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/SaveFromNWFNoOverwrite", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFNoOverwriteResponse> SaveFromNWFNoOverwriteAsync(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFNoOverwriteRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/AddWorkflowScheduleOnListItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        int AddWorkflowScheduleOnListItem(int itemId, string listName, string workflowName, string startDataXml, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Schedule schedule, bool updateIfExists);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/AddWorkflowScheduleOnListItem", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddWorkflowScheduleOnListItemAsync(int itemId, string listName, string workflowName, string startDataXml, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Schedule schedule, bool updateIfExists);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/AddWorkflowSchedule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        int AddWorkflowSchedule(string fileUrl, string workflowName, string startDataXml, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Schedule schedule, bool updateIfExists);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/AddWorkflowSchedule", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddWorkflowScheduleAsync(string fileUrl, string workflowName, string startDataXml, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Schedule schedule, bool updateIfExists);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/RemoveWorkflowScheduleOnListItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        bool RemoveWorkflowScheduleOnListItem(int itemId, string listName, string workflowName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/RemoveWorkflowScheduleOnListItem", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveWorkflowScheduleOnListItemAsync(int itemId, string listName, string workflowName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/RemoveWorkflowSchedule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        bool RemoveWorkflowSchedule(string fileUrl, string workflowName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/RemoveWorkflowSchedule", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RemoveWorkflowScheduleAsync(string fileUrl, string workflowName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/DelegateAllTasks", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        string[] DelegateAllTasks(string currentUser, string newUser, bool sendNotification, string comments, bool global);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/DelegateAllTasks", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> DelegateAllTasksAsync(string currentUser, string newUser, bool sendNotification, string comments, bool global);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/AddLongTermDelegationRule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        int AddLongTermDelegationRule(System.DateTime fromTheBeginningOf, System.DateTime untilTheEndOf, string delegateFrom, string delegateTo, bool currentSiteOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/AddLongTermDelegationRule", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddLongTermDelegationRuleAsync(System.DateTime fromTheBeginningOf, System.DateTime untilTheEndOf, string delegateFrom, string delegateTo, bool currentSiteOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/DeleteLongTermDelegationRule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        void DeleteLongTermDelegationRule(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/DeleteLongTermDelegationRule", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteLongTermDelegationRuleAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/FixWorkflowsInSiteFromTemplate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        void FixWorkflowsInSiteFromTemplate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/FixWorkflowsInSiteFromTemplate", ReplyAction="*")]
        System.Threading.Tasks.Task FixWorkflowsInSiteFromTemplateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/ExportWorkflow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        string ExportWorkflow(string workflowName, string listName, string workflowType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/ExportWorkflow", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ExportWorkflowAsync(string workflowName, string listName, string workflowType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/EnsureWorkflowConsumption", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        void EnsureWorkflowConsumption(System.Guid workflowId, System.Guid listId, string workflowType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/EnsureWorkflowConsumption", ReplyAction="*")]
        System.Threading.Tasks.Task EnsureWorkflowConsumptionAsync(System.Guid workflowId, System.Guid listId, string workflowType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetTaskStubsForCurrentUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.TaskStub[] GetTaskStubsForCurrentUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetTaskStubsForCurrentUser", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.TaskStub[]> GetTaskStubsForCurrentUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetTaskDetailsUsingStub", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowTaskDetail GetTaskDetailsUsingStub(string taskToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetTaskDetailsUsingStub", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowTaskDetail> GetTaskDetailsUsingStubAsync(string taskToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/ProcessTaskResponseUsingToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        void ProcessTaskResponseUsingToken(string comments, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Outcome outcome, string taskToken, int customOutcome);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/ProcessTaskResponseUsingToken", ReplyAction="*")]
        System.Threading.Tasks.Task ProcessTaskResponseUsingTokenAsync(string comments, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Outcome outcome, string taskToken, int customOutcome);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetFolders", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Folder[] GetFolders(string listGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetFolders", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Folder[]> GetFoldersAsync(string listGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetListContentTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorkflowLog[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActivityLogInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NWContextData[]))]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ContentType[] GetListContentTypes(string listGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://nintex.com/GetListContentTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ContentType[]> GetListContentTypesAsync(string listGuid);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class WorkflowMetaData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string modifiedByField;
        
        private string publishedByField;
        
        private string workflowDescriptionField;
        
        private System.Guid ecbIdField;
        
        private System.DateTime publishedField;
        
        private string localTimePublishedStringField;
        
        private System.DateTime timeLastModifiedField;
        
        private string localTimeLastModifiedStringField;
        
        private string changeInformationField;
        
        private System.Guid workflowIdField;
        
        private string workflowTypeDisplayNameField;
        
        private string uIVersionField;
        
        private bool isPublishedField;
        
        private bool previouslyPublishedField;
        
        private System.Guid listIdField;
        
        private int majorVersionField;
        
        private int minorVersionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ModifiedBy {
            get {
                return this.modifiedByField;
            }
            set {
                this.modifiedByField = value;
                this.RaisePropertyChanged("ModifiedBy");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string PublishedBy {
            get {
                return this.publishedByField;
            }
            set {
                this.publishedByField = value;
                this.RaisePropertyChanged("PublishedBy");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string WorkflowDescription {
            get {
                return this.workflowDescriptionField;
            }
            set {
                this.workflowDescriptionField = value;
                this.RaisePropertyChanged("WorkflowDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public System.Guid EcbId {
            get {
                return this.ecbIdField;
            }
            set {
                this.ecbIdField = value;
                this.RaisePropertyChanged("EcbId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public System.DateTime Published {
            get {
                return this.publishedField;
            }
            set {
                this.publishedField = value;
                this.RaisePropertyChanged("Published");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string LocalTimePublishedString {
            get {
                return this.localTimePublishedStringField;
            }
            set {
                this.localTimePublishedStringField = value;
                this.RaisePropertyChanged("LocalTimePublishedString");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public System.DateTime TimeLastModified {
            get {
                return this.timeLastModifiedField;
            }
            set {
                this.timeLastModifiedField = value;
                this.RaisePropertyChanged("TimeLastModified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string LocalTimeLastModifiedString {
            get {
                return this.localTimeLastModifiedStringField;
            }
            set {
                this.localTimeLastModifiedStringField = value;
                this.RaisePropertyChanged("LocalTimeLastModifiedString");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string ChangeInformation {
            get {
                return this.changeInformationField;
            }
            set {
                this.changeInformationField = value;
                this.RaisePropertyChanged("ChangeInformation");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public System.Guid WorkflowId {
            get {
                return this.workflowIdField;
            }
            set {
                this.workflowIdField = value;
                this.RaisePropertyChanged("WorkflowId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string WorkflowTypeDisplayName {
            get {
                return this.workflowTypeDisplayNameField;
            }
            set {
                this.workflowTypeDisplayNameField = value;
                this.RaisePropertyChanged("WorkflowTypeDisplayName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string UIVersion {
            get {
                return this.uIVersionField;
            }
            set {
                this.uIVersionField = value;
                this.RaisePropertyChanged("UIVersion");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public bool IsPublished {
            get {
                return this.isPublishedField;
            }
            set {
                this.isPublishedField = value;
                this.RaisePropertyChanged("IsPublished");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public bool PreviouslyPublished {
            get {
                return this.previouslyPublishedField;
            }
            set {
                this.previouslyPublishedField = value;
                this.RaisePropertyChanged("PreviouslyPublished");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public System.Guid ListId {
            get {
                return this.listIdField;
            }
            set {
                this.listIdField = value;
                this.RaisePropertyChanged("ListId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public int MajorVersion {
            get {
                return this.majorVersionField;
            }
            set {
                this.majorVersionField = value;
                this.RaisePropertyChanged("MajorVersion");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public int MinorVersion {
            get {
                return this.minorVersionField;
            }
            set {
                this.minorVersionField = value;
                this.RaisePropertyChanged("MinorVersion");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class ContentType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string idField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("ID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class Folder : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string urlField;
        
        private string idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
                this.RaisePropertyChanged("Url");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("ID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class Field : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string displayNameField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
                this.RaisePropertyChanged("DisplayName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class WorkflowTaskDetail : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ConfiguredOutcome[] availableCustomOutcomeField;
        
        private Field[] itemPropertiesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public ConfiguredOutcome[] AvailableCustomOutcome {
            get {
                return this.availableCustomOutcomeField;
            }
            set {
                this.availableCustomOutcomeField = value;
                this.RaisePropertyChanged("AvailableCustomOutcome");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public Field[] ItemProperties {
            get {
                return this.itemPropertiesField;
            }
            set {
                this.itemPropertiesField = value;
                this.RaisePropertyChanged("ItemProperties");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class ConfiguredOutcome : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private CommentsMode commentsModeField;
        
        private string descriptionField;
        
        private int branchIndexField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public CommentsMode CommentsMode {
            get {
                return this.commentsModeField;
            }
            set {
                this.commentsModeField = value;
                this.RaisePropertyChanged("CommentsMode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int BranchIndex {
            get {
                return this.branchIndexField;
            }
            set {
                this.branchIndexField = value;
                this.RaisePropertyChanged("BranchIndex");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum CommentsMode {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Optional,
        
        /// <remarks/>
        Required,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class TaskStub : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string taskTokenField;
        
        private string workflowNameField;
        
        private string activityTitleField;
        
        private System.DateTime entryTimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string TaskToken {
            get {
                return this.taskTokenField;
            }
            set {
                this.taskTokenField = value;
                this.RaisePropertyChanged("TaskToken");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string WorkflowName {
            get {
                return this.workflowNameField;
            }
            set {
                this.workflowNameField = value;
                this.RaisePropertyChanged("WorkflowName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ActivityTitle {
            get {
                return this.activityTitleField;
            }
            set {
                this.activityTitleField = value;
                this.RaisePropertyChanged("ActivityTitle");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime EntryTime {
            get {
                return this.entryTimeField;
            }
            set {
                this.entryTimeField = value;
                this.RaisePropertyChanged("EntryTime");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class RepeatInterval : object, System.ComponentModel.INotifyPropertyChanged {
        
        private RepeatIntervalType typeField;
        
        private int countBetweenIntervalsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public RepeatIntervalType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
                this.RaisePropertyChanged("Type");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int CountBetweenIntervals {
            get {
                return this.countBetweenIntervalsField;
            }
            set {
                this.countBetweenIntervalsField = value;
                this.RaisePropertyChanged("CountBetweenIntervals");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum RepeatIntervalType {
        
        /// <remarks/>
        Daily,
        
        /// <remarks/>
        Monthly,
        
        /// <remarks/>
        Hourly,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class Schedule : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int maximumRepeatsField;
        
        private bool workdaysOnlyField;
        
        private RepeatInterval repeatIntervalField;
        
        private EndScheduleOn endOnField;
        
        private System.DateTime startTimeField;
        
        private System.DateTime endTimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int MaximumRepeats {
            get {
                return this.maximumRepeatsField;
            }
            set {
                this.maximumRepeatsField = value;
                this.RaisePropertyChanged("MaximumRepeats");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool WorkdaysOnly {
            get {
                return this.workdaysOnlyField;
            }
            set {
                this.workdaysOnlyField = value;
                this.RaisePropertyChanged("WorkdaysOnly");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public RepeatInterval RepeatInterval {
            get {
                return this.repeatIntervalField;
            }
            set {
                this.repeatIntervalField = value;
                this.RaisePropertyChanged("RepeatInterval");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public EndScheduleOn EndOn {
            get {
                return this.endOnField;
            }
            set {
                this.endOnField = value;
                this.RaisePropertyChanged("EndOn");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public System.DateTime StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
                this.RaisePropertyChanged("StartTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public System.DateTime EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
                this.RaisePropertyChanged("EndTime");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum EndScheduleOn {
        
        /// <remarks/>
        RepeatCount,
        
        /// <remarks/>
        EndDate,
        
        /// <remarks/>
        NoLimit,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class StartDataItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string valueField;
        
        private string keyField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
                this.RaisePropertyChanged("Key");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class MessageBoxItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string messageIDField;
        
        private System.Guid workflowInstanceIDField;
        
        private StartDataItem[] dataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string MessageID {
            get {
                return this.messageIDField;
            }
            set {
                this.messageIDField = value;
                this.RaisePropertyChanged("MessageID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public System.Guid WorkflowInstanceID {
            get {
                return this.workflowInstanceIDField;
            }
            set {
                this.workflowInstanceIDField = value;
                this.RaisePropertyChanged("WorkflowInstanceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public StartDataItem[] Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
                this.RaisePropertyChanged("Data");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class HumanTaskLogInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime entryTimeField;
        
        private string entryTimeShortField;
        
        private string entryTimeLongField;
        
        private string entryDateShortField;
        
        private string entryDateLongField;
        
        private System.DateTime endTimeField;
        
        private string endTimeShortField;
        
        private string endTimeLongField;
        
        private string endDateShortField;
        
        private string endDateLongField;
        
        private string displayNameField;
        
        private string activityTitleField;
        
        private int sequenceIdField;
        
        private string usernameField;
        
        private string emailField;
        
        private System.DateTime userStartField;
        
        private string userStartTimeShortField;
        
        private string userStartTimeLongField;
        
        private string userStartDateShortField;
        
        private string userStartDateLongField;
        
        private System.DateTime userEndField;
        
        private string userEndTimeShortField;
        
        private string userEndTimeLongField;
        
        private string userEndDateShortField;
        
        private string userEndDateLongField;
        
        private string userCommentsField;
        
        private Outcome outcomeField;
        
        private string customOutcomeField;
        
        private System.DateTime userActionTimeField;
        
        private string userActionTimeShortField;
        
        private string userActionTimeLongField;
        
        private string userActionDateShortField;
        
        private string userActionDateLongField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public System.DateTime EntryTime {
            get {
                return this.entryTimeField;
            }
            set {
                this.entryTimeField = value;
                this.RaisePropertyChanged("EntryTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string EntryTimeShort {
            get {
                return this.entryTimeShortField;
            }
            set {
                this.entryTimeShortField = value;
                this.RaisePropertyChanged("EntryTimeShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string EntryTimeLong {
            get {
                return this.entryTimeLongField;
            }
            set {
                this.entryTimeLongField = value;
                this.RaisePropertyChanged("EntryTimeLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string EntryDateShort {
            get {
                return this.entryDateShortField;
            }
            set {
                this.entryDateShortField = value;
                this.RaisePropertyChanged("EntryDateShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string EntryDateLong {
            get {
                return this.entryDateLongField;
            }
            set {
                this.entryDateLongField = value;
                this.RaisePropertyChanged("EntryDateLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public System.DateTime EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
                this.RaisePropertyChanged("EndTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string EndTimeShort {
            get {
                return this.endTimeShortField;
            }
            set {
                this.endTimeShortField = value;
                this.RaisePropertyChanged("EndTimeShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string EndTimeLong {
            get {
                return this.endTimeLongField;
            }
            set {
                this.endTimeLongField = value;
                this.RaisePropertyChanged("EndTimeLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string EndDateShort {
            get {
                return this.endDateShortField;
            }
            set {
                this.endDateShortField = value;
                this.RaisePropertyChanged("EndDateShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string EndDateLong {
            get {
                return this.endDateLongField;
            }
            set {
                this.endDateLongField = value;
                this.RaisePropertyChanged("EndDateLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
                this.RaisePropertyChanged("DisplayName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string ActivityTitle {
            get {
                return this.activityTitleField;
            }
            set {
                this.activityTitleField = value;
                this.RaisePropertyChanged("ActivityTitle");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public int SequenceId {
            get {
                return this.sequenceIdField;
            }
            set {
                this.sequenceIdField = value;
                this.RaisePropertyChanged("SequenceId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
                this.RaisePropertyChanged("Username");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
                this.RaisePropertyChanged("Email");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public System.DateTime UserStart {
            get {
                return this.userStartField;
            }
            set {
                this.userStartField = value;
                this.RaisePropertyChanged("UserStart");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public string UserStartTimeShort {
            get {
                return this.userStartTimeShortField;
            }
            set {
                this.userStartTimeShortField = value;
                this.RaisePropertyChanged("UserStartTimeShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public string UserStartTimeLong {
            get {
                return this.userStartTimeLongField;
            }
            set {
                this.userStartTimeLongField = value;
                this.RaisePropertyChanged("UserStartTimeLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=18)]
        public string UserStartDateShort {
            get {
                return this.userStartDateShortField;
            }
            set {
                this.userStartDateShortField = value;
                this.RaisePropertyChanged("UserStartDateShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=19)]
        public string UserStartDateLong {
            get {
                return this.userStartDateLongField;
            }
            set {
                this.userStartDateLongField = value;
                this.RaisePropertyChanged("UserStartDateLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=20)]
        public System.DateTime UserEnd {
            get {
                return this.userEndField;
            }
            set {
                this.userEndField = value;
                this.RaisePropertyChanged("UserEnd");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=21)]
        public string UserEndTimeShort {
            get {
                return this.userEndTimeShortField;
            }
            set {
                this.userEndTimeShortField = value;
                this.RaisePropertyChanged("UserEndTimeShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=22)]
        public string UserEndTimeLong {
            get {
                return this.userEndTimeLongField;
            }
            set {
                this.userEndTimeLongField = value;
                this.RaisePropertyChanged("UserEndTimeLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=23)]
        public string UserEndDateShort {
            get {
                return this.userEndDateShortField;
            }
            set {
                this.userEndDateShortField = value;
                this.RaisePropertyChanged("UserEndDateShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=24)]
        public string UserEndDateLong {
            get {
                return this.userEndDateLongField;
            }
            set {
                this.userEndDateLongField = value;
                this.RaisePropertyChanged("UserEndDateLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=25)]
        public string UserComments {
            get {
                return this.userCommentsField;
            }
            set {
                this.userCommentsField = value;
                this.RaisePropertyChanged("UserComments");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=26)]
        public Outcome Outcome {
            get {
                return this.outcomeField;
            }
            set {
                this.outcomeField = value;
                this.RaisePropertyChanged("Outcome");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=27)]
        public string CustomOutcome {
            get {
                return this.customOutcomeField;
            }
            set {
                this.customOutcomeField = value;
                this.RaisePropertyChanged("CustomOutcome");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=28)]
        public System.DateTime UserActionTime {
            get {
                return this.userActionTimeField;
            }
            set {
                this.userActionTimeField = value;
                this.RaisePropertyChanged("UserActionTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=29)]
        public string UserActionTimeShort {
            get {
                return this.userActionTimeShortField;
            }
            set {
                this.userActionTimeShortField = value;
                this.RaisePropertyChanged("UserActionTimeShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=30)]
        public string UserActionTimeLong {
            get {
                return this.userActionTimeLongField;
            }
            set {
                this.userActionTimeLongField = value;
                this.RaisePropertyChanged("UserActionTimeLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=31)]
        public string UserActionDateShort {
            get {
                return this.userActionDateShortField;
            }
            set {
                this.userActionDateShortField = value;
                this.RaisePropertyChanged("UserActionDateShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=32)]
        public string UserActionDateLong {
            get {
                return this.userActionDateLongField;
            }
            set {
                this.userActionDateLongField = value;
                this.RaisePropertyChanged("UserActionDateLong");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum Outcome {
        
        /// <remarks/>
        Approved,
        
        /// <remarks/>
        Rejected,
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Cancelled,
        
        /// <remarks/>
        NotRequired,
        
        /// <remarks/>
        Continue,
        
        /// <remarks/>
        Delegated,
        
        /// <remarks/>
        Custom,
        
        /// <remarks/>
        OverrideApproved,
        
        /// <remarks/>
        OverrideRejected,
        
        /// <remarks/>
        OverrideContinue,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NWContextData))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class NWContextKey : object, System.ComponentModel.INotifyPropertyChanged {
        
        private SPFieldType dataTypeField;
        
        private string nameField;
        
        private string displayNameField;
        
        private string categoryField;
        
        private string descriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SPFieldType DataType {
            get {
                return this.dataTypeField;
            }
            set {
                this.dataTypeField = value;
                this.RaisePropertyChanged("DataType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
                this.RaisePropertyChanged("DisplayName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
                this.RaisePropertyChanged("Category");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum SPFieldType {
        
        /// <remarks/>
        Invalid,
        
        /// <remarks/>
        Integer,
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        Note,
        
        /// <remarks/>
        DateTime,
        
        /// <remarks/>
        Counter,
        
        /// <remarks/>
        Choice,
        
        /// <remarks/>
        Lookup,
        
        /// <remarks/>
        Boolean,
        
        /// <remarks/>
        Number,
        
        /// <remarks/>
        Currency,
        
        /// <remarks/>
        URL,
        
        /// <remarks/>
        Computed,
        
        /// <remarks/>
        Threading,
        
        /// <remarks/>
        Guid,
        
        /// <remarks/>
        MultiChoice,
        
        /// <remarks/>
        GridChoice,
        
        /// <remarks/>
        Calculated,
        
        /// <remarks/>
        File,
        
        /// <remarks/>
        Attachments,
        
        /// <remarks/>
        User,
        
        /// <remarks/>
        Recurrence,
        
        /// <remarks/>
        CrossProjectLink,
        
        /// <remarks/>
        ModStat,
        
        /// <remarks/>
        Error,
        
        /// <remarks/>
        ContentTypeId,
        
        /// <remarks/>
        PageSeparator,
        
        /// <remarks/>
        ThreadIndex,
        
        /// <remarks/>
        WorkflowStatus,
        
        /// <remarks/>
        AllDayEvent,
        
        /// <remarks/>
        WorkflowEventType,
        
        /// <remarks/>
        MaxItems,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class NWContextData : NWContextKey {
        
        private ContextDataOptions optionsField;
        
        private string dataTypeDisplayResourceKeyField;
        
        private object dataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ContextDataOptions Options {
            get {
                return this.optionsField;
            }
            set {
                this.optionsField = value;
                this.RaisePropertyChanged("Options");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DataTypeDisplayResourceKey {
            get {
                return this.dataTypeDisplayResourceKeyField;
            }
            set {
                this.dataTypeDisplayResourceKeyField = value;
                this.RaisePropertyChanged("DataTypeDisplayResourceKey");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public object Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
                this.RaisePropertyChanged("Data");
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum ContextDataOptions {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        DatesInIso8601Format = 2,
        
        /// <remarks/>
        BooleanInCamlFormat = 4,
        
        /// <remarks/>
        BooleanInXmlFormat = 8,
        
        /// <remarks/>
        HtmlEncodeStrings = 16,
        
        /// <remarks/>
        SqlFriendly = 32,
        
        /// <remarks/>
        UnformattedNumbers = 64,
        
        /// <remarks/>
        RetainCollections = 128,
        
        /// <remarks/>
        RetainInfoPathPersonXml = 256,
        
        /// <remarks/>
        PeopleAsSPId = 512,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class VerboseLog : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string machineNameField;
        
        private string processNameField;
        
        private string nWVersionField;
        
        private string sPVersionField;
        
        private NWContextData[] contextDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string MachineName {
            get {
                return this.machineNameField;
            }
            set {
                this.machineNameField = value;
                this.RaisePropertyChanged("MachineName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProcessName {
            get {
                return this.processNameField;
            }
            set {
                this.processNameField = value;
                this.RaisePropertyChanged("ProcessName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string NWVersion {
            get {
                return this.nWVersionField;
            }
            set {
                this.nWVersionField = value;
                this.RaisePropertyChanged("NWVersion");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string SPVersion {
            get {
                return this.sPVersionField;
            }
            set {
                this.sPVersionField = value;
                this.RaisePropertyChanged("SPVersion");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public NWContextData[] ContextData {
            get {
                return this.contextDataField;
            }
            set {
                this.contextDataField = value;
                this.RaisePropertyChanged("ContextData");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class ActivityLogInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private VerboseLog beforePropertiesField;
        
        private VerboseLog afterPropertiesField;
        
        private System.DateTime startTimeField;
        
        private string startTimeShortField;
        
        private string startTimeLongField;
        
        private string startDateShortField;
        
        private string startDateLongField;
        
        private System.DateTime endTimeField;
        
        private string endTimeShortField;
        
        private string endTimeLongField;
        
        private string endDateLongField;
        
        private string activityTitleField;
        
        private int sequenceIdField;
        
        private long progressIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VerboseLog BeforeProperties {
            get {
                return this.beforePropertiesField;
            }
            set {
                this.beforePropertiesField = value;
                this.RaisePropertyChanged("BeforeProperties");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public VerboseLog AfterProperties {
            get {
                return this.afterPropertiesField;
            }
            set {
                this.afterPropertiesField = value;
                this.RaisePropertyChanged("AfterProperties");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public System.DateTime StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
                this.RaisePropertyChanged("StartTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string StartTimeShort {
            get {
                return this.startTimeShortField;
            }
            set {
                this.startTimeShortField = value;
                this.RaisePropertyChanged("StartTimeShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string StartTimeLong {
            get {
                return this.startTimeLongField;
            }
            set {
                this.startTimeLongField = value;
                this.RaisePropertyChanged("StartTimeLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string StartDateShort {
            get {
                return this.startDateShortField;
            }
            set {
                this.startDateShortField = value;
                this.RaisePropertyChanged("StartDateShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string StartDateLong {
            get {
                return this.startDateLongField;
            }
            set {
                this.startDateLongField = value;
                this.RaisePropertyChanged("StartDateLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public System.DateTime EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
                this.RaisePropertyChanged("EndTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string EndTimeShort {
            get {
                return this.endTimeShortField;
            }
            set {
                this.endTimeShortField = value;
                this.RaisePropertyChanged("EndTimeShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string EndTimeLong {
            get {
                return this.endTimeLongField;
            }
            set {
                this.endTimeLongField = value;
                this.RaisePropertyChanged("EndTimeLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string EndDateLong {
            get {
                return this.endDateLongField;
            }
            set {
                this.endDateLongField = value;
                this.RaisePropertyChanged("EndDateLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string ActivityTitle {
            get {
                return this.activityTitleField;
            }
            set {
                this.activityTitleField = value;
                this.RaisePropertyChanged("ActivityTitle");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public int SequenceId {
            get {
                return this.sequenceIdField;
            }
            set {
                this.sequenceIdField = value;
                this.RaisePropertyChanged("SequenceId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public long ProgressId {
            get {
                return this.progressIdField;
            }
            set {
                this.progressIdField = value;
                this.RaisePropertyChanged("ProgressId");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class WorkflowLog : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string workflowNameField;
        
        private SPWorkflowState internalStateField;
        
        private System.DateTime startDateField;
        
        private string startTimeShortField;
        
        private string startTimeLongField;
        
        private string startDateShortField;
        
        private string startDateLongField;
        
        private System.DateTime lastModifiedDateField;
        
        private string lastModifiedTimeShortField;
        
        private string lastModifiedTimeLongField;
        
        private string lastModifiedDateShortField;
        
        private string lastModifiedDateLongField;
        
        private System.Guid workflowInstanceIdField;
        
        private ActivityLogInfo[] activitiesField;
        
        private HumanTaskLogInfo[] humanTasksField;
        
        private System.Data.DataTable workflowHistoryField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string WorkflowName {
            get {
                return this.workflowNameField;
            }
            set {
                this.workflowNameField = value;
                this.RaisePropertyChanged("WorkflowName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public SPWorkflowState InternalState {
            get {
                return this.internalStateField;
            }
            set {
                this.internalStateField = value;
                this.RaisePropertyChanged("InternalState");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
                this.RaisePropertyChanged("StartDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string StartTimeShort {
            get {
                return this.startTimeShortField;
            }
            set {
                this.startTimeShortField = value;
                this.RaisePropertyChanged("StartTimeShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string StartTimeLong {
            get {
                return this.startTimeLongField;
            }
            set {
                this.startTimeLongField = value;
                this.RaisePropertyChanged("StartTimeLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string StartDateShort {
            get {
                return this.startDateShortField;
            }
            set {
                this.startDateShortField = value;
                this.RaisePropertyChanged("StartDateShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string StartDateLong {
            get {
                return this.startDateLongField;
            }
            set {
                this.startDateLongField = value;
                this.RaisePropertyChanged("StartDateLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public System.DateTime LastModifiedDate {
            get {
                return this.lastModifiedDateField;
            }
            set {
                this.lastModifiedDateField = value;
                this.RaisePropertyChanged("LastModifiedDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string LastModifiedTimeShort {
            get {
                return this.lastModifiedTimeShortField;
            }
            set {
                this.lastModifiedTimeShortField = value;
                this.RaisePropertyChanged("LastModifiedTimeShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string LastModifiedTimeLong {
            get {
                return this.lastModifiedTimeLongField;
            }
            set {
                this.lastModifiedTimeLongField = value;
                this.RaisePropertyChanged("LastModifiedTimeLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string LastModifiedDateShort {
            get {
                return this.lastModifiedDateShortField;
            }
            set {
                this.lastModifiedDateShortField = value;
                this.RaisePropertyChanged("LastModifiedDateShort");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string LastModifiedDateLong {
            get {
                return this.lastModifiedDateLongField;
            }
            set {
                this.lastModifiedDateLongField = value;
                this.RaisePropertyChanged("LastModifiedDateLong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public System.Guid WorkflowInstanceId {
            get {
                return this.workflowInstanceIdField;
            }
            set {
                this.workflowInstanceIdField = value;
                this.RaisePropertyChanged("WorkflowInstanceId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=13)]
        public ActivityLogInfo[] Activities {
            get {
                return this.activitiesField;
            }
            set {
                this.activitiesField = value;
                this.RaisePropertyChanged("Activities");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=14)]
        public HumanTaskLogInfo[] HumanTasks {
            get {
                return this.humanTasksField;
            }
            set {
                this.humanTasksField = value;
                this.RaisePropertyChanged("HumanTasks");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public System.Data.DataTable WorkflowHistory {
            get {
                return this.workflowHistoryField;
            }
            set {
                this.workflowHistoryField = value;
                this.RaisePropertyChanged("WorkflowHistory");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum SPWorkflowState {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        Locked = 2,
        
        /// <remarks/>
        Running = 4,
        
        /// <remarks/>
        Completed = 8,
        
        /// <remarks/>
        Cancelled = 16,
        
        /// <remarks/>
        Expiring = 32,
        
        /// <remarks/>
        Expired = 64,
        
        /// <remarks/>
        Faulting = 128,
        
        /// <remarks/>
        Terminated = 256,
        
        /// <remarks/>
        Suspended = 512,
        
        /// <remarks/>
        Orphaned = 1024,
        
        /// <remarks/>
        HasNewEvents = 2048,
        
        /// <remarks/>
        NotStarted = 4096,
        
        /// <remarks/>
        All = 8192,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class User : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string sipAddressField;
        
        private string otherEmailAddressField;
        
        private string userIDField;
        
        private string displayNameField;
        
        private bool isDomainGroupField;
        
        private bool isSPGroupField;
        
        private bool isUserField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string SipAddress {
            get {
                return this.sipAddressField;
            }
            set {
                this.sipAddressField = value;
                this.RaisePropertyChanged("SipAddress");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string OtherEmailAddress {
            get {
                return this.otherEmailAddressField;
            }
            set {
                this.otherEmailAddressField = value;
                this.RaisePropertyChanged("OtherEmailAddress");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
                this.RaisePropertyChanged("UserID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
                this.RaisePropertyChanged("DisplayName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool IsDomainGroup {
            get {
                return this.isDomainGroupField;
            }
            set {
                this.isDomainGroupField = value;
                this.RaisePropertyChanged("IsDomainGroup");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool IsSPGroup {
            get {
                return this.isSPGroupField;
            }
            set {
                this.isSPGroupField = value;
                this.RaisePropertyChanged("IsSPGroup");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public bool IsUser {
            get {
                return this.isUserField;
            }
            set {
                this.isUserField = value;
                this.RaisePropertyChanged("IsUser");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class UserTask : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int sharePointTaskIdField;
        
        private long humanWorkflowIDField;
        
        private User assignedToField;
        
        private string commentsField;
        
        private System.DateTime entryTimeField;
        
        private string workflowNameField;
        
        private System.Guid workflowInstaceIdField;
        
        private string taskNameField;
        
        private TaskType taskTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int SharePointTaskId {
            get {
                return this.sharePointTaskIdField;
            }
            set {
                this.sharePointTaskIdField = value;
                this.RaisePropertyChanged("SharePointTaskId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long HumanWorkflowID {
            get {
                return this.humanWorkflowIDField;
            }
            set {
                this.humanWorkflowIDField = value;
                this.RaisePropertyChanged("HumanWorkflowID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public User AssignedTo {
            get {
                return this.assignedToField;
            }
            set {
                this.assignedToField = value;
                this.RaisePropertyChanged("AssignedTo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
                this.RaisePropertyChanged("Comments");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public System.DateTime EntryTime {
            get {
                return this.entryTimeField;
            }
            set {
                this.entryTimeField = value;
                this.RaisePropertyChanged("EntryTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string WorkflowName {
            get {
                return this.workflowNameField;
            }
            set {
                this.workflowNameField = value;
                this.RaisePropertyChanged("WorkflowName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public System.Guid WorkflowInstaceId {
            get {
                return this.workflowInstaceIdField;
            }
            set {
                this.workflowInstaceIdField = value;
                this.RaisePropertyChanged("WorkflowInstaceId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string TaskName {
            get {
                return this.taskNameField;
            }
            set {
                this.taskNameField = value;
                this.RaisePropertyChanged("TaskName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public TaskType TaskType {
            get {
                return this.taskTypeField;
            }
            set {
                this.taskTypeField = value;
                this.RaisePropertyChanged("TaskType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum TaskType {
        
        /// <remarks/>
        Approval,
        
        /// <remarks/>
        Review,
        
        /// <remarks/>
        CollectData,
        
        /// <remarks/>
        Todo,
        
        /// <remarks/>
        MultiOutcome,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class PendingMyApprovalLight : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string currentActivityTitleField;
        
        private int idleTimeMinutesField;
        
        private int expectedDurationField;
        
        private string itemTitleField;
        
        private string itemFilenameField;
        
        private string workflowNameField;
        
        private string itemUrlField;
        
        private string progressUrlField;
        
        private string approvalUrlField;
        
        private System.DateTime entryTimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CurrentActivityTitle {
            get {
                return this.currentActivityTitleField;
            }
            set {
                this.currentActivityTitleField = value;
                this.RaisePropertyChanged("CurrentActivityTitle");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int IdleTimeMinutes {
            get {
                return this.idleTimeMinutesField;
            }
            set {
                this.idleTimeMinutesField = value;
                this.RaisePropertyChanged("IdleTimeMinutes");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int ExpectedDuration {
            get {
                return this.expectedDurationField;
            }
            set {
                this.expectedDurationField = value;
                this.RaisePropertyChanged("ExpectedDuration");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string ItemTitle {
            get {
                return this.itemTitleField;
            }
            set {
                this.itemTitleField = value;
                this.RaisePropertyChanged("ItemTitle");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string ItemFilename {
            get {
                return this.itemFilenameField;
            }
            set {
                this.itemFilenameField = value;
                this.RaisePropertyChanged("ItemFilename");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string WorkflowName {
            get {
                return this.workflowNameField;
            }
            set {
                this.workflowNameField = value;
                this.RaisePropertyChanged("WorkflowName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string ItemUrl {
            get {
                return this.itemUrlField;
            }
            set {
                this.itemUrlField = value;
                this.RaisePropertyChanged("ItemUrl");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string ProgressUrl {
            get {
                return this.progressUrlField;
            }
            set {
                this.progressUrlField = value;
                this.RaisePropertyChanged("ProgressUrl");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string ApprovalUrl {
            get {
                return this.approvalUrlField;
            }
            set {
                this.approvalUrlField = value;
                this.RaisePropertyChanged("ApprovalUrl");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public System.DateTime EntryTime {
            get {
                return this.entryTimeField;
            }
            set {
                this.entryTimeField = value;
                this.RaisePropertyChanged("EntryTime");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public partial class ItemsPendingApproval : object, System.ComponentModel.INotifyPropertyChanged {
        
        private PendingMyApprovalLight[] itemsField;
        
        private bool hasNewDataField;
        
        private string uniquenessInfoField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public PendingMyApprovalLight[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
                this.RaisePropertyChanged("Items");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool HasNewData {
            get {
                return this.hasNewDataField;
            }
            set {
                this.hasNewDataField = value;
                this.RaisePropertyChanged("HasNewData");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string UniquenessInfo {
            get {
                return this.uniquenessInfoField;
            }
            set {
                this.uniquenessInfoField = value;
                this.RaisePropertyChanged("UniquenessInfo");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum NameInUseStatus {
        
        /// <remarks/>
        NameNotUsed,
        
        /// <remarks/>
        NameUsedInOtherList,
        
        /// <remarks/>
        NameUsedInThisList,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nintex.com")]
    public enum ProcessTaskResponseResult {
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        CannotObtainLock,
        
        /// <remarks/>
        InvalidUser,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PublishFromNWF", WrapperNamespace="http://nintex.com", IsWrapped=true)]
    public partial class PublishFromNWFRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] workflowFile;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=1)]
        public string listName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=2)]
        public string workflowName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=3)]
        public bool saveIfCannotPublish;
        
        public PublishFromNWFRequest() {
        }
        
        public PublishFromNWFRequest(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            this.workflowFile = workflowFile;
            this.listName = listName;
            this.workflowName = workflowName;
            this.saveIfCannotPublish = saveIfCannotPublish;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PublishFromNWFResponse", WrapperNamespace="http://nintex.com", IsWrapped=true)]
    public partial class PublishFromNWFResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=0)]
        public bool PublishFromNWFResult;
        
        public PublishFromNWFResponse() {
        }
        
        public PublishFromNWFResponse(bool PublishFromNWFResult) {
            this.PublishFromNWFResult = PublishFromNWFResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PublishFromNWFNoOverwrite", WrapperNamespace="http://nintex.com", IsWrapped=true)]
    public partial class PublishFromNWFNoOverwriteRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] workflowFile;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=1)]
        public string listName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=2)]
        public string workflowName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=3)]
        public bool saveIfCannotPublish;
        
        public PublishFromNWFNoOverwriteRequest() {
        }
        
        public PublishFromNWFNoOverwriteRequest(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            this.workflowFile = workflowFile;
            this.listName = listName;
            this.workflowName = workflowName;
            this.saveIfCannotPublish = saveIfCannotPublish;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PublishFromNWFNoOverwriteResponse", WrapperNamespace="http://nintex.com", IsWrapped=true)]
    public partial class PublishFromNWFNoOverwriteResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=0)]
        public bool PublishFromNWFNoOverwriteResult;
        
        public PublishFromNWFNoOverwriteResponse() {
        }
        
        public PublishFromNWFNoOverwriteResponse(bool PublishFromNWFNoOverwriteResult) {
            this.PublishFromNWFNoOverwriteResult = PublishFromNWFNoOverwriteResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PublishFromNWFSkipValidation", WrapperNamespace="http://nintex.com", IsWrapped=true)]
    public partial class PublishFromNWFSkipValidationRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] workflowFile;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=1)]
        public string listName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=2)]
        public string workflowName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=3)]
        public bool saveIfCannotPublish;
        
        public PublishFromNWFSkipValidationRequest() {
        }
        
        public PublishFromNWFSkipValidationRequest(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            this.workflowFile = workflowFile;
            this.listName = listName;
            this.workflowName = workflowName;
            this.saveIfCannotPublish = saveIfCannotPublish;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PublishFromNWFSkipValidationResponse", WrapperNamespace="http://nintex.com", IsWrapped=true)]
    public partial class PublishFromNWFSkipValidationResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=0)]
        public bool PublishFromNWFSkipValidationResult;
        
        public PublishFromNWFSkipValidationResponse() {
        }
        
        public PublishFromNWFSkipValidationResponse(bool PublishFromNWFSkipValidationResult) {
            this.PublishFromNWFSkipValidationResult = PublishFromNWFSkipValidationResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PublishFromNWFSkipValidationNoOverwrite", WrapperNamespace="http://nintex.com", IsWrapped=true)]
    public partial class PublishFromNWFSkipValidationNoOverwriteRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] workflowFile;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=1)]
        public string listName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=2)]
        public string workflowName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=3)]
        public bool saveIfCannotPublish;
        
        public PublishFromNWFSkipValidationNoOverwriteRequest() {
        }
        
        public PublishFromNWFSkipValidationNoOverwriteRequest(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            this.workflowFile = workflowFile;
            this.listName = listName;
            this.workflowName = workflowName;
            this.saveIfCannotPublish = saveIfCannotPublish;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PublishFromNWFSkipValidationNoOverwriteResponse", WrapperNamespace="http://nintex.com", IsWrapped=true)]
    public partial class PublishFromNWFSkipValidationNoOverwriteResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=0)]
        public bool PublishFromNWFSkipValidationNoOverwriteResult;
        
        public PublishFromNWFSkipValidationNoOverwriteResponse() {
        }
        
        public PublishFromNWFSkipValidationNoOverwriteResponse(bool PublishFromNWFSkipValidationNoOverwriteResult) {
            this.PublishFromNWFSkipValidationNoOverwriteResult = PublishFromNWFSkipValidationNoOverwriteResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SaveFromNWF", WrapperNamespace="http://nintex.com", IsWrapped=true)]
    public partial class SaveFromNWFRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] workflowFile;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=1)]
        public string listName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=2)]
        public string workflowName;
        
        public SaveFromNWFRequest() {
        }
        
        public SaveFromNWFRequest(byte[] workflowFile, string listName, string workflowName) {
            this.workflowFile = workflowFile;
            this.listName = listName;
            this.workflowName = workflowName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SaveFromNWFResponse", WrapperNamespace="http://nintex.com", IsWrapped=true)]
    public partial class SaveFromNWFResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=0)]
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData SaveFromNWFResult;
        
        public SaveFromNWFResponse() {
        }
        
        public SaveFromNWFResponse(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData SaveFromNWFResult) {
            this.SaveFromNWFResult = SaveFromNWFResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SaveFromNWFNoOverwrite", WrapperNamespace="http://nintex.com", IsWrapped=true)]
    public partial class SaveFromNWFNoOverwriteRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] workflowFile;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=1)]
        public string listName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=2)]
        public string workflowName;
        
        public SaveFromNWFNoOverwriteRequest() {
        }
        
        public SaveFromNWFNoOverwriteRequest(byte[] workflowFile, string listName, string workflowName) {
            this.workflowFile = workflowFile;
            this.listName = listName;
            this.workflowName = workflowName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SaveFromNWFNoOverwriteResponse", WrapperNamespace="http://nintex.com", IsWrapped=true)]
    public partial class SaveFromNWFNoOverwriteResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://nintex.com", Order=0)]
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData SaveFromNWFNoOverwriteResult;
        
        public SaveFromNWFNoOverwriteResponse() {
        }
        
        public SaveFromNWFNoOverwriteResponse(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData SaveFromNWFNoOverwriteResult) {
            this.SaveFromNWFNoOverwriteResult = SaveFromNWFNoOverwriteResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface NintexWorkflowWSSoapChannel : SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NintexWorkflowWSSoapClient : System.ServiceModel.ClientBase<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap>, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap {
        
        public NintexWorkflowWSSoapClient() {
        }
        
        public NintexWorkflowWSSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NintexWorkflowWSSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NintexWorkflowWSSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NintexWorkflowWSSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string WorkflowFormProductSelected(string workflowConfiguration, string activityConfiguration, string product, string formType) {
            return base.Channel.WorkflowFormProductSelected(workflowConfiguration, activityConfiguration, product, formType);
        }
        
        public System.Threading.Tasks.Task<string> WorkflowFormProductSelectedAsync(string workflowConfiguration, string activityConfiguration, string product, string formType) {
            return base.Channel.WorkflowFormProductSelectedAsync(workflowConfiguration, activityConfiguration, product, formType);
        }
        
        public void CheckInForms(string workflowConfiguration, string activityConfiguration, string formType) {
            base.Channel.CheckInForms(workflowConfiguration, activityConfiguration, formType);
        }
        
        public System.Threading.Tasks.Task CheckInFormsAsync(string workflowConfiguration, string activityConfiguration, string formType) {
            return base.Channel.CheckInFormsAsync(workflowConfiguration, activityConfiguration, formType);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData SaveWorkflow(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes) {
            return base.Channel.SaveWorkflow(wfName, activityConfigs, listId, contentTypeId, changeNotes);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData> SaveWorkflowAsync(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes) {
            return base.Channel.SaveWorkflowAsync(wfName, activityConfigs, listId, contentTypeId, changeNotes);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NameInUseStatus WorkflowExists(string workflowName, System.Guid listId, string workflowType) {
            return base.Channel.WorkflowExists(workflowName, listId, workflowType);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NameInUseStatus> WorkflowExistsAsync(string workflowName, System.Guid listId, string workflowType) {
            return base.Channel.WorkflowExistsAsync(workflowName, listId, workflowType);
        }
        
        public bool SnippetExists(string snippetName) {
            return base.Channel.SnippetExists(snippetName);
        }
        
        public System.Threading.Tasks.Task<bool> SnippetExistsAsync(string snippetName) {
            return base.Channel.SnippetExistsAsync(snippetName);
        }
        
        public bool TemplateExists(string templateName) {
            return base.Channel.TemplateExists(templateName);
        }
        
        public System.Threading.Tasks.Task<bool> TemplateExistsAsync(string templateName) {
            return base.Channel.TemplateExistsAsync(templateName);
        }
        
        public string SaveSnippet(string snippetName, string activityConfigs) {
            return base.Channel.SaveSnippet(snippetName, activityConfigs);
        }
        
        public System.Threading.Tasks.Task<string> SaveSnippetAsync(string snippetName, string activityConfigs) {
            return base.Channel.SaveSnippetAsync(snippetName, activityConfigs);
        }
        
        public void SaveTemplate(string templateName, string templateDescription, string category, string activityConfigs) {
            base.Channel.SaveTemplate(templateName, templateDescription, category, activityConfigs);
        }
        
        public System.Threading.Tasks.Task SaveTemplateAsync(string templateName, string templateDescription, string category, string activityConfigs) {
            return base.Channel.SaveTemplateAsync(templateName, templateDescription, category, activityConfigs);
        }
        
        public void SaveTemplate2(string templateName, string templateDescription, string category, string activityConfigs, int lcid) {
            base.Channel.SaveTemplate2(templateName, templateDescription, category, activityConfigs, lcid);
        }
        
        public System.Threading.Tasks.Task SaveTemplate2Async(string templateName, string templateDescription, string category, string activityConfigs, int lcid) {
            return base.Channel.SaveTemplate2Async(templateName, templateDescription, category, activityConfigs, lcid);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData PublishWorkflow(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes) {
            return base.Channel.PublishWorkflow(wfName, activityConfigs, listId, contentTypeId, changeNotes);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData> PublishWorkflowAsync(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes) {
            return base.Channel.PublishWorkflowAsync(wfName, activityConfigs, listId, contentTypeId, changeNotes);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData PublishWorkflow2(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes, bool isProduction) {
            return base.Channel.PublishWorkflow2(wfName, activityConfigs, listId, contentTypeId, changeNotes, isProduction);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData> PublishWorkflow2Async(string wfName, string activityConfigs, System.Guid listId, string contentTypeId, string changeNotes, bool isProduction) {
            return base.Channel.PublishWorkflow2Async(wfName, activityConfigs, listId, contentTypeId, changeNotes, isProduction);
        }
        
        public void TerminateWorkflow(System.Guid listId, int itemId, System.Guid instanceId) {
            base.Channel.TerminateWorkflow(listId, itemId, instanceId);
        }
        
        public System.Threading.Tasks.Task TerminateWorkflowAsync(System.Guid listId, int itemId, System.Guid instanceId) {
            return base.Channel.TerminateWorkflowAsync(listId, itemId, instanceId);
        }
        
        public void TerminateWorkflowByName(string fileUrl, string workflowName, bool terminatePreviousInstances) {
            base.Channel.TerminateWorkflowByName(fileUrl, workflowName, terminatePreviousInstances);
        }
        
        public System.Threading.Tasks.Task TerminateWorkflowByNameAsync(string fileUrl, string workflowName, bool terminatePreviousInstances) {
            return base.Channel.TerminateWorkflowByNameAsync(fileUrl, workflowName, terminatePreviousInstances);
        }
        
        public void TerminateWorkflowByNameForListItem(string listName, int itemId, string workflowName, bool terminatePreviousInstances) {
            base.Channel.TerminateWorkflowByNameForListItem(listName, itemId, workflowName, terminatePreviousInstances);
        }
        
        public System.Threading.Tasks.Task TerminateWorkflowByNameForListItemAsync(string listName, int itemId, string workflowName, bool terminatePreviousInstances) {
            return base.Channel.TerminateWorkflowByNameForListItemAsync(listName, itemId, workflowName, terminatePreviousInstances);
        }
        
        public bool CheckGlobalReuseStatus(string workflowName) {
            return base.Channel.CheckGlobalReuseStatus(workflowName);
        }
        
        public System.Threading.Tasks.Task<bool> CheckGlobalReuseStatusAsync(string workflowName) {
            return base.Channel.CheckGlobalReuseStatusAsync(workflowName);
        }
        
        public void DeleteWorkflow(System.Guid listId, System.Guid workflowId, string workflowType) {
            base.Channel.DeleteWorkflow(listId, workflowId, workflowType);
        }
        
        public System.Threading.Tasks.Task DeleteWorkflowAsync(System.Guid listId, System.Guid workflowId, string workflowType) {
            return base.Channel.DeleteWorkflowAsync(listId, workflowId, workflowType);
        }
        
        public void DeleteSnippet(System.Guid snippetId) {
            base.Channel.DeleteSnippet(snippetId);
        }
        
        public System.Threading.Tasks.Task DeleteSnippetAsync(System.Guid snippetId) {
            return base.Channel.DeleteSnippetAsync(snippetId);
        }
        
        public void HideTaskForApprover(long approverId, int contentDbId) {
            base.Channel.HideTaskForApprover(approverId, contentDbId);
        }
        
        public System.Threading.Tasks.Task HideTaskForApproverAsync(long approverId, int contentDbId) {
            return base.Channel.HideTaskForApproverAsync(approverId, contentDbId);
        }
        
        public void HideWorkflow(System.Guid siteId, System.Guid instanceId) {
            base.Channel.HideWorkflow(siteId, instanceId);
        }
        
        public System.Threading.Tasks.Task HideWorkflowAsync(System.Guid siteId, System.Guid instanceId) {
            return base.Channel.HideWorkflowAsync(siteId, instanceId);
        }
        
        public System.Guid StartWorkflow(string fileUrl, string workflowName, string associationData) {
            return base.Channel.StartWorkflow(fileUrl, workflowName, associationData);
        }
        
        public System.Threading.Tasks.Task<System.Guid> StartWorkflowAsync(string fileUrl, string workflowName, string associationData) {
            return base.Channel.StartWorkflowAsync(fileUrl, workflowName, associationData);
        }
        
        public System.Guid StartWorkflowOnListItem(int itemId, string listName, string workflowName, string associationData) {
            return base.Channel.StartWorkflowOnListItem(itemId, listName, workflowName, associationData);
        }
        
        public System.Threading.Tasks.Task<System.Guid> StartWorkflowOnListItemAsync(int itemId, string listName, string workflowName, string associationData) {
            return base.Channel.StartWorkflowOnListItemAsync(itemId, listName, workflowName, associationData);
        }
        
        public System.Guid StartSiteWorkflow(string workflowName, string associationData) {
            return base.Channel.StartSiteWorkflow(workflowName, associationData);
        }
        
        public System.Threading.Tasks.Task<System.Guid> StartSiteWorkflowAsync(string workflowName, string associationData) {
            return base.Channel.StartSiteWorkflowAsync(workflowName, associationData);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ItemsPendingApproval GetItemsPendingMyApproval(string uniquenessInfo) {
            return base.Channel.GetItemsPendingMyApproval(uniquenessInfo);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ItemsPendingApproval> GetItemsPendingMyApprovalAsync(string uniquenessInfo) {
            return base.Channel.GetItemsPendingMyApprovalAsync(uniquenessInfo);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[] GetRunningWorkflowTasksForCurrentUser(string fileUrl) {
            return base.Channel.GetRunningWorkflowTasksForCurrentUser(fileUrl);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[]> GetRunningWorkflowTasksForCurrentUserAsync(string fileUrl) {
            return base.Channel.GetRunningWorkflowTasksForCurrentUserAsync(fileUrl);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[] GetRunningWorkflowTasksForCurrentUserForListItem(int itemId, string listName) {
            return base.Channel.GetRunningWorkflowTasksForCurrentUserForListItem(itemId, listName);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[]> GetRunningWorkflowTasksForCurrentUserForListItemAsync(int itemId, string listName) {
            return base.Channel.GetRunningWorkflowTasksForCurrentUserForListItemAsync(itemId, listName);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[] GetRunningWorkflowTasks(string fileUrl) {
            return base.Channel.GetRunningWorkflowTasks(fileUrl);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[]> GetRunningWorkflowTasksAsync(string fileUrl) {
            return base.Channel.GetRunningWorkflowTasksAsync(fileUrl);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[] GetRunningWorkflowTasksForListItem(int itemId, string listName) {
            return base.Channel.GetRunningWorkflowTasksForListItem(itemId, listName);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[]> GetRunningWorkflowTasksForListItemAsync(int itemId, string listName) {
            return base.Channel.GetRunningWorkflowTasksForListItemAsync(itemId, listName);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[] GetRunningWorkflowTasksCollection(string userlogin, string teamsiteUrl, string listName) {
            return base.Channel.GetRunningWorkflowTasksCollection(userlogin, teamsiteUrl, listName);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.UserTask[]> GetRunningWorkflowTasksCollectionAsync(string userlogin, string teamsiteUrl, string listName) {
            return base.Channel.GetRunningWorkflowTasksCollectionAsync(userlogin, teamsiteUrl, listName);
        }
        
        public bool ProcessTaskResponse(string comments, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Outcome outcome, int spTaskId) {
            return base.Channel.ProcessTaskResponse(comments, outcome, spTaskId);
        }
        
        public System.Threading.Tasks.Task<bool> ProcessTaskResponseAsync(string comments, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Outcome outcome, int spTaskId) {
            return base.Channel.ProcessTaskResponseAsync(comments, outcome, spTaskId);
        }
        
        public bool ProcessTaskResponse2(string comments, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Outcome outcome, int spTaskId, string taskListName) {
            return base.Channel.ProcessTaskResponse2(comments, outcome, spTaskId, taskListName);
        }
        
        public System.Threading.Tasks.Task<bool> ProcessTaskResponse2Async(string comments, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Outcome outcome, int spTaskId, string taskListName) {
            return base.Channel.ProcessTaskResponse2Async(comments, outcome, spTaskId, taskListName);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ProcessTaskResponseResult ProcessTaskResponse3(string comments, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Outcome outcome, int spTaskId, string taskListName) {
            return base.Channel.ProcessTaskResponse3(comments, outcome, spTaskId, taskListName);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ProcessTaskResponseResult> ProcessTaskResponse3Async(string comments, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Outcome outcome, int spTaskId, string taskListName) {
            return base.Channel.ProcessTaskResponse3Async(comments, outcome, spTaskId, taskListName);
        }
        
        public bool ProcessFlexiTaskResponse(string comments, string outcome, int spTaskId, string taskListName) {
            return base.Channel.ProcessFlexiTaskResponse(comments, outcome, spTaskId, taskListName);
        }
        
        public System.Threading.Tasks.Task<bool> ProcessFlexiTaskResponseAsync(string comments, string outcome, int spTaskId, string taskListName) {
            return base.Channel.ProcessFlexiTaskResponseAsync(comments, outcome, spTaskId, taskListName);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ProcessTaskResponseResult ProcessFlexiTaskResponse2(string comments, string outcome, int spTaskId, string taskListName) {
            return base.Channel.ProcessFlexiTaskResponse2(comments, outcome, spTaskId, taskListName);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ProcessTaskResponseResult> ProcessFlexiTaskResponse2Async(string comments, string outcome, int spTaskId, string taskListName) {
            return base.Channel.ProcessFlexiTaskResponse2Async(comments, outcome, spTaskId, taskListName);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ConfiguredOutcome[] GetOutcomesForFlexiTask(int spTaskId, string taskListName) {
            return base.Channel.GetOutcomesForFlexiTask(spTaskId, taskListName);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ConfiguredOutcome[]> GetOutcomesForFlexiTaskAsync(int spTaskId, string taskListName) {
            return base.Channel.GetOutcomesForFlexiTaskAsync(spTaskId, taskListName);
        }
        
        public bool DelegateTask(int spTaskId, string taskListName, string targetUsername, string comments, bool sendNotification) {
            return base.Channel.DelegateTask(spTaskId, taskListName, targetUsername, comments, sendNotification);
        }
        
        public System.Threading.Tasks.Task<bool> DelegateTaskAsync(int spTaskId, string taskListName, string targetUsername, string comments, bool sendNotification) {
            return base.Channel.DelegateTaskAsync(spTaskId, taskListName, targetUsername, comments, sendNotification);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowLog[] GetWorkflowHistory(string fileUrl, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SPWorkflowState stateFilter, string workflowNameFilter) {
            return base.Channel.GetWorkflowHistory(fileUrl, stateFilter, workflowNameFilter);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowLog[]> GetWorkflowHistoryAsync(string fileUrl, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SPWorkflowState stateFilter, string workflowNameFilter) {
            return base.Channel.GetWorkflowHistoryAsync(fileUrl, stateFilter, workflowNameFilter);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowLog[] GetWorkflowHistoryForListItem(int itemId, string listName, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SPWorkflowState stateFilter, string workflowNameFilter) {
            return base.Channel.GetWorkflowHistoryForListItem(itemId, listName, stateFilter, workflowNameFilter);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowLog[]> GetWorkflowHistoryForListItemAsync(int itemId, string listName, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SPWorkflowState stateFilter, string workflowNameFilter) {
            return base.Channel.GetWorkflowHistoryForListItemAsync(itemId, listName, stateFilter, workflowNameFilter);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.MessageBoxItem[] QueryForMessages(System.Guid workflowInstanceId, string messageId) {
            return base.Channel.QueryForMessages(workflowInstanceId, messageId);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.MessageBoxItem[]> QueryForMessagesAsync(System.Guid workflowInstanceId, string messageId) {
            return base.Channel.QueryForMessagesAsync(workflowInstanceId, messageId);
        }
        
        public bool PublishFromNWFXml(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            return base.Channel.PublishFromNWFXml(workflowFile, listName, workflowName, saveIfCannotPublish);
        }
        
        public System.Threading.Tasks.Task<bool> PublishFromNWFXmlAsync(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            return base.Channel.PublishFromNWFXmlAsync(workflowFile, listName, workflowName, saveIfCannotPublish);
        }
        
        public bool PublishFromNWFXmlSkipValidation(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            return base.Channel.PublishFromNWFXmlSkipValidation(workflowFile, listName, workflowName, saveIfCannotPublish);
        }
        
        public System.Threading.Tasks.Task<bool> PublishFromNWFXmlSkipValidationAsync(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            return base.Channel.PublishFromNWFXmlSkipValidationAsync(workflowFile, listName, workflowName, saveIfCannotPublish);
        }
        
        public bool PublishFromNWFXmlNoOverwrite(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            return base.Channel.PublishFromNWFXmlNoOverwrite(workflowFile, listName, workflowName, saveIfCannotPublish);
        }
        
        public System.Threading.Tasks.Task<bool> PublishFromNWFXmlNoOverwriteAsync(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            return base.Channel.PublishFromNWFXmlNoOverwriteAsync(workflowFile, listName, workflowName, saveIfCannotPublish);
        }
        
        public bool PublishFromNWFXmlSkipValidationNoOverwrite(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            return base.Channel.PublishFromNWFXmlSkipValidationNoOverwrite(workflowFile, listName, workflowName, saveIfCannotPublish);
        }
        
        public System.Threading.Tasks.Task<bool> PublishFromNWFXmlSkipValidationNoOverwriteAsync(string workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            return base.Channel.PublishFromNWFXmlSkipValidationNoOverwriteAsync(workflowFile, listName, workflowName, saveIfCannotPublish);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFResponse SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap.PublishFromNWF(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFRequest request) {
            return base.Channel.PublishFromNWF(request);
        }
        
        public bool PublishFromNWF(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFRequest inValue = new SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFRequest();
            inValue.workflowFile = workflowFile;
            inValue.listName = listName;
            inValue.workflowName = workflowName;
            inValue.saveIfCannotPublish = saveIfCannotPublish;
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFResponse retVal = ((SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap)(this)).PublishFromNWF(inValue);
            return retVal.PublishFromNWFResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFResponse> SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap.PublishFromNWFAsync(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFRequest request) {
            return base.Channel.PublishFromNWFAsync(request);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFResponse> PublishFromNWFAsync(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFRequest inValue = new SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFRequest();
            inValue.workflowFile = workflowFile;
            inValue.listName = listName;
            inValue.workflowName = workflowName;
            inValue.saveIfCannotPublish = saveIfCannotPublish;
            return ((SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap)(this)).PublishFromNWFAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFNoOverwriteResponse SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap.PublishFromNWFNoOverwrite(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFNoOverwriteRequest request) {
            return base.Channel.PublishFromNWFNoOverwrite(request);
        }
        
        public bool PublishFromNWFNoOverwrite(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFNoOverwriteRequest inValue = new SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFNoOverwriteRequest();
            inValue.workflowFile = workflowFile;
            inValue.listName = listName;
            inValue.workflowName = workflowName;
            inValue.saveIfCannotPublish = saveIfCannotPublish;
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFNoOverwriteResponse retVal = ((SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap)(this)).PublishFromNWFNoOverwrite(inValue);
            return retVal.PublishFromNWFNoOverwriteResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFNoOverwriteResponse> SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap.PublishFromNWFNoOverwriteAsync(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFNoOverwriteRequest request) {
            return base.Channel.PublishFromNWFNoOverwriteAsync(request);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFNoOverwriteResponse> PublishFromNWFNoOverwriteAsync(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFNoOverwriteRequest inValue = new SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFNoOverwriteRequest();
            inValue.workflowFile = workflowFile;
            inValue.listName = listName;
            inValue.workflowName = workflowName;
            inValue.saveIfCannotPublish = saveIfCannotPublish;
            return ((SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap)(this)).PublishFromNWFNoOverwriteAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationResponse SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap.PublishFromNWFSkipValidation(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationRequest request) {
            return base.Channel.PublishFromNWFSkipValidation(request);
        }
        
        public bool PublishFromNWFSkipValidation(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationRequest inValue = new SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationRequest();
            inValue.workflowFile = workflowFile;
            inValue.listName = listName;
            inValue.workflowName = workflowName;
            inValue.saveIfCannotPublish = saveIfCannotPublish;
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationResponse retVal = ((SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap)(this)).PublishFromNWFSkipValidation(inValue);
            return retVal.PublishFromNWFSkipValidationResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationResponse> SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap.PublishFromNWFSkipValidationAsync(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationRequest request) {
            return base.Channel.PublishFromNWFSkipValidationAsync(request);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationResponse> PublishFromNWFSkipValidationAsync(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationRequest inValue = new SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationRequest();
            inValue.workflowFile = workflowFile;
            inValue.listName = listName;
            inValue.workflowName = workflowName;
            inValue.saveIfCannotPublish = saveIfCannotPublish;
            return ((SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap)(this)).PublishFromNWFSkipValidationAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationNoOverwriteResponse SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap.PublishFromNWFSkipValidationNoOverwrite(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationNoOverwriteRequest request) {
            return base.Channel.PublishFromNWFSkipValidationNoOverwrite(request);
        }
        
        public bool PublishFromNWFSkipValidationNoOverwrite(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationNoOverwriteRequest inValue = new SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationNoOverwriteRequest();
            inValue.workflowFile = workflowFile;
            inValue.listName = listName;
            inValue.workflowName = workflowName;
            inValue.saveIfCannotPublish = saveIfCannotPublish;
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationNoOverwriteResponse retVal = ((SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap)(this)).PublishFromNWFSkipValidationNoOverwrite(inValue);
            return retVal.PublishFromNWFSkipValidationNoOverwriteResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationNoOverwriteResponse> SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap.PublishFromNWFSkipValidationNoOverwriteAsync(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationNoOverwriteRequest request) {
            return base.Channel.PublishFromNWFSkipValidationNoOverwriteAsync(request);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationNoOverwriteResponse> PublishFromNWFSkipValidationNoOverwriteAsync(byte[] workflowFile, string listName, string workflowName, bool saveIfCannotPublish) {
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationNoOverwriteRequest inValue = new SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.PublishFromNWFSkipValidationNoOverwriteRequest();
            inValue.workflowFile = workflowFile;
            inValue.listName = listName;
            inValue.workflowName = workflowName;
            inValue.saveIfCannotPublish = saveIfCannotPublish;
            return ((SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap)(this)).PublishFromNWFSkipValidationNoOverwriteAsync(inValue);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData SaveFromNWFXml(string workflowFile, string listName, string workflowName) {
            return base.Channel.SaveFromNWFXml(workflowFile, listName, workflowName);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData> SaveFromNWFXmlAsync(string workflowFile, string listName, string workflowName) {
            return base.Channel.SaveFromNWFXmlAsync(workflowFile, listName, workflowName);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData SaveFromNWFXmlNoOverwrite(string workflowFile, string listName, string workflowName) {
            return base.Channel.SaveFromNWFXmlNoOverwrite(workflowFile, listName, workflowName);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData> SaveFromNWFXmlNoOverwriteAsync(string workflowFile, string listName, string workflowName) {
            return base.Channel.SaveFromNWFXmlNoOverwriteAsync(workflowFile, listName, workflowName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFResponse SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap.SaveFromNWF(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFRequest request) {
            return base.Channel.SaveFromNWF(request);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData SaveFromNWF(byte[] workflowFile, string listName, string workflowName) {
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFRequest inValue = new SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFRequest();
            inValue.workflowFile = workflowFile;
            inValue.listName = listName;
            inValue.workflowName = workflowName;
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFResponse retVal = ((SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap)(this)).SaveFromNWF(inValue);
            return retVal.SaveFromNWFResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFResponse> SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap.SaveFromNWFAsync(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFRequest request) {
            return base.Channel.SaveFromNWFAsync(request);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFResponse> SaveFromNWFAsync(byte[] workflowFile, string listName, string workflowName) {
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFRequest inValue = new SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFRequest();
            inValue.workflowFile = workflowFile;
            inValue.listName = listName;
            inValue.workflowName = workflowName;
            return ((SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap)(this)).SaveFromNWFAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFNoOverwriteResponse SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap.SaveFromNWFNoOverwrite(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFNoOverwriteRequest request) {
            return base.Channel.SaveFromNWFNoOverwrite(request);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowMetaData SaveFromNWFNoOverwrite(byte[] workflowFile, string listName, string workflowName) {
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFNoOverwriteRequest inValue = new SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFNoOverwriteRequest();
            inValue.workflowFile = workflowFile;
            inValue.listName = listName;
            inValue.workflowName = workflowName;
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFNoOverwriteResponse retVal = ((SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap)(this)).SaveFromNWFNoOverwrite(inValue);
            return retVal.SaveFromNWFNoOverwriteResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFNoOverwriteResponse> SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap.SaveFromNWFNoOverwriteAsync(SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFNoOverwriteRequest request) {
            return base.Channel.SaveFromNWFNoOverwriteAsync(request);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFNoOverwriteResponse> SaveFromNWFNoOverwriteAsync(byte[] workflowFile, string listName, string workflowName) {
            SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFNoOverwriteRequest inValue = new SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.SaveFromNWFNoOverwriteRequest();
            inValue.workflowFile = workflowFile;
            inValue.listName = listName;
            inValue.workflowName = workflowName;
            return ((SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.NintexWorkflowWSSoap)(this)).SaveFromNWFNoOverwriteAsync(inValue);
        }
        
        public int AddWorkflowScheduleOnListItem(int itemId, string listName, string workflowName, string startDataXml, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Schedule schedule, bool updateIfExists) {
            return base.Channel.AddWorkflowScheduleOnListItem(itemId, listName, workflowName, startDataXml, schedule, updateIfExists);
        }
        
        public System.Threading.Tasks.Task<int> AddWorkflowScheduleOnListItemAsync(int itemId, string listName, string workflowName, string startDataXml, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Schedule schedule, bool updateIfExists) {
            return base.Channel.AddWorkflowScheduleOnListItemAsync(itemId, listName, workflowName, startDataXml, schedule, updateIfExists);
        }
        
        public int AddWorkflowSchedule(string fileUrl, string workflowName, string startDataXml, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Schedule schedule, bool updateIfExists) {
            return base.Channel.AddWorkflowSchedule(fileUrl, workflowName, startDataXml, schedule, updateIfExists);
        }
        
        public System.Threading.Tasks.Task<int> AddWorkflowScheduleAsync(string fileUrl, string workflowName, string startDataXml, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Schedule schedule, bool updateIfExists) {
            return base.Channel.AddWorkflowScheduleAsync(fileUrl, workflowName, startDataXml, schedule, updateIfExists);
        }
        
        public bool RemoveWorkflowScheduleOnListItem(int itemId, string listName, string workflowName) {
            return base.Channel.RemoveWorkflowScheduleOnListItem(itemId, listName, workflowName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveWorkflowScheduleOnListItemAsync(int itemId, string listName, string workflowName) {
            return base.Channel.RemoveWorkflowScheduleOnListItemAsync(itemId, listName, workflowName);
        }
        
        public bool RemoveWorkflowSchedule(string fileUrl, string workflowName) {
            return base.Channel.RemoveWorkflowSchedule(fileUrl, workflowName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveWorkflowScheduleAsync(string fileUrl, string workflowName) {
            return base.Channel.RemoveWorkflowScheduleAsync(fileUrl, workflowName);
        }
        
        public string[] DelegateAllTasks(string currentUser, string newUser, bool sendNotification, string comments, bool global) {
            return base.Channel.DelegateAllTasks(currentUser, newUser, sendNotification, comments, global);
        }
        
        public System.Threading.Tasks.Task<string[]> DelegateAllTasksAsync(string currentUser, string newUser, bool sendNotification, string comments, bool global) {
            return base.Channel.DelegateAllTasksAsync(currentUser, newUser, sendNotification, comments, global);
        }
        
        public int AddLongTermDelegationRule(System.DateTime fromTheBeginningOf, System.DateTime untilTheEndOf, string delegateFrom, string delegateTo, bool currentSiteOnly) {
            return base.Channel.AddLongTermDelegationRule(fromTheBeginningOf, untilTheEndOf, delegateFrom, delegateTo, currentSiteOnly);
        }
        
        public System.Threading.Tasks.Task<int> AddLongTermDelegationRuleAsync(System.DateTime fromTheBeginningOf, System.DateTime untilTheEndOf, string delegateFrom, string delegateTo, bool currentSiteOnly) {
            return base.Channel.AddLongTermDelegationRuleAsync(fromTheBeginningOf, untilTheEndOf, delegateFrom, delegateTo, currentSiteOnly);
        }
        
        public void DeleteLongTermDelegationRule(int id) {
            base.Channel.DeleteLongTermDelegationRule(id);
        }
        
        public System.Threading.Tasks.Task DeleteLongTermDelegationRuleAsync(int id) {
            return base.Channel.DeleteLongTermDelegationRuleAsync(id);
        }
        
        public void FixWorkflowsInSiteFromTemplate() {
            base.Channel.FixWorkflowsInSiteFromTemplate();
        }
        
        public System.Threading.Tasks.Task FixWorkflowsInSiteFromTemplateAsync() {
            return base.Channel.FixWorkflowsInSiteFromTemplateAsync();
        }
        
        public string ExportWorkflow(string workflowName, string listName, string workflowType) {
            return base.Channel.ExportWorkflow(workflowName, listName, workflowType);
        }
        
        public System.Threading.Tasks.Task<string> ExportWorkflowAsync(string workflowName, string listName, string workflowType) {
            return base.Channel.ExportWorkflowAsync(workflowName, listName, workflowType);
        }
        
        public void EnsureWorkflowConsumption(System.Guid workflowId, System.Guid listId, string workflowType) {
            base.Channel.EnsureWorkflowConsumption(workflowId, listId, workflowType);
        }
        
        public System.Threading.Tasks.Task EnsureWorkflowConsumptionAsync(System.Guid workflowId, System.Guid listId, string workflowType) {
            return base.Channel.EnsureWorkflowConsumptionAsync(workflowId, listId, workflowType);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.TaskStub[] GetTaskStubsForCurrentUser() {
            return base.Channel.GetTaskStubsForCurrentUser();
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.TaskStub[]> GetTaskStubsForCurrentUserAsync() {
            return base.Channel.GetTaskStubsForCurrentUserAsync();
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowTaskDetail GetTaskDetailsUsingStub(string taskToken) {
            return base.Channel.GetTaskDetailsUsingStub(taskToken);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.WorkflowTaskDetail> GetTaskDetailsUsingStubAsync(string taskToken) {
            return base.Channel.GetTaskDetailsUsingStubAsync(taskToken);
        }
        
        public void ProcessTaskResponseUsingToken(string comments, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Outcome outcome, string taskToken, int customOutcome) {
            base.Channel.ProcessTaskResponseUsingToken(comments, outcome, taskToken, customOutcome);
        }
        
        public System.Threading.Tasks.Task ProcessTaskResponseUsingTokenAsync(string comments, SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Outcome outcome, string taskToken, int customOutcome) {
            return base.Channel.ProcessTaskResponseUsingTokenAsync(comments, outcome, taskToken, customOutcome);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Folder[] GetFolders(string listGuid) {
            return base.Channel.GetFolders(listGuid);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.Folder[]> GetFoldersAsync(string listGuid) {
            return base.Channel.GetFoldersAsync(listGuid);
        }
        
        public SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ContentType[] GetListContentTypes(string listGuid) {
            return base.Channel.GetListContentTypes(listGuid);
        }
        
        public System.Threading.Tasks.Task<SPMeta.NintexExt.CSOM.SP13.NintexWorkflowWS.ContentType[]> GetListContentTypesAsync(string listGuid) {
            return base.Channel.GetListContentTypesAsync(listGuid);
        }
    }
}
